plugins {
    id 'java'
    id 'jacoco'
    id 'org.sonarqube' version '4.3.1.3277'
}

group 'com.meawallet'
version '1.0-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

allprojects {
    group = 'com.meawallet'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '17'
}
subprojects {
    apply plugin: 'java'
    apply plugin: 'org.sonarqube'
    apply plugin: 'jacoco'

    sonar {
        properties {
            property 'sonar.coverage.jacoco.xmlReportPaths', "$projectDir.parentFile.path/build/reports/jacoco/codeCoverageReport/codeCoverageReport.xml"
        }
    }

    tasks.withType(Test).configureEach {
        useJUnitPlatform()
    }

    apply from: "$project.rootDir/sonar.gradle"

    tasks.register("codeCoverageReport", JacocoReport) {
        subprojects { subproject ->
            subproject.plugins.withType(JacocoPlugin).configureEach {
                subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).configureEach { testTask ->
                    if (testTask.extensions.getByType(JacocoTaskExtension).isEnabled()) {
                        sourceSets subproject.sourceSets.main
                        executionData(testTask)
                    } else {
                        logger.warn('Jacoco extension is disabled for test task \'{}\' in project \'{}\'. this test task will be excluded from jacoco report.', testTask.getName(), subproject.getName())
                    }
                }

                subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).forEach {
                    rootProject.tasks.codeCoverageReport.dependsOn(it)
                }
            }
        }
        reports {
            xml.required = true
            html.required = true
            html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
        }
    }

    repositories {
        mavenCentral()
    }

    dependencies{
        implementation 'org.springframework:spring-context:6.0.5'
        implementation 'org.springframework:spring-core:6.0.5'

        compileOnly 'org.projectlombok:lombok:1.18.26'
        annotationProcessor 'org.projectlombok:lombok:1.18.26'

        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
        testImplementation 'org.mockito:mockito-junit-jupiter:5.1.1'
        testImplementation 'org.mockito:mockito-core:5.1.1'
        testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
    }
}

sonar {
    properties {
        property("sonar.projectKey", "myProjectKey")
        property("sonar.organization", "myOrganization")
        property("sonar.host.url", "myHostUrl")
    }
}